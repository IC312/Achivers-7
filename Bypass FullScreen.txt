// ==UserScript==
// @name         Anti-Fullscreen & Monitoring Bypass
// @namespace    http://tampermonkey.net/
// @version      1.0
// @description  V√¥ hi·ªáu m·ªçi c∆° ch·∫ø gi√°m s√°t: F11, ESC, fullscreen, resize, visibility, DevTools lock, tab switch, blur, v.v.
// @match        *://*/*
// @run-at       document-start
// ==/UserScript==

(function () {
  'use strict';

  // üõë Ch·∫∑n F11 & ESC
  window.addEventListener('keydown', function (e) {
    if (e.key === 'F11' || e.keyCode === 122 || e.key === 'Escape' || e.keyCode === 27) {
      e.preventDefault();
      e.stopImmediatePropagation();
      console.warn(`‚õîÔ∏è ${e.key} b·ªã ch·∫∑n b·ªüi script`);
    }
  }, true);

  // üõ°Ô∏è Ch·∫∑n c√°c s·ª± ki·ªán theo d√µi ho·∫°t ƒë·ªông
  ['visibilitychange', 'fullscreenchange', 'webkitfullscreenchange', 'blur', 'focus', 'resize', 'mouseout', 'mouseleave'].forEach(evt => {
    window.addEventListener(evt, e => e.stopImmediatePropagation(), true);
    document.addEventListener(evt, e => e.stopImmediatePropagation(), true);
  });

  // üö´ Ch·∫∑n √©p fullscreen
  document.documentElement.requestFullscreen = () => {
    console.warn("üö´ requestFullscreen b·ªã ch·∫∑n");
  };

  // ü™Ñ Gi·∫£ l·∫≠p lu√¥n ·ªü fullscreen
  Object.defineProperty(document, 'fullscreenElement', {
    get: () => document.documentElement
  });
  Object.defineProperty(document, 'hidden', {
    get: () => false
  });
  Object.defineProperty(document, 'visibilityState', {
    get: () => 'visible'
  });
  document.hasFocus = () => true;

  // ‚ùå Ch·∫∑n IntersectionObserver (d√≤ v√πng hi·ªÉn th·ªã)
  window.IntersectionObserver = class {
    constructor() {
      console.warn('[Bypass] Blocked IntersectionObserver');
    }
    observe() {}
    disconnect() {}
    unobserve() {}
  };

  // ‚ùå Ch·∫∑n requestAnimationFrame c√≥ ch·ª©a hasFocus
  const originalRAF = window.requestAnimationFrame;
  window.requestAnimationFrame = function (fn) {
    if (typeof fn === 'function' && fn.toString().includes('hasFocus')) {
      console.warn('[Bypass] Blocked requestAnimationFrame(hasFocus)');
      return;
    }
    return originalRAF(fn);
  };

  // ‚ùå Ch·∫∑n setInterval theo d√µi focus
  const originalSetInterval = window.setInterval;
  window.setInterval = function (fn, delay, ...args) {
    if (typeof fn === 'function' && fn.toString().includes('hasFocus')) {
      console.warn('[Bypass] Blocked setInterval(hasFocus)');
      return;
    }
    return originalSetInterval(fn, delay, ...args);
  };

})();
